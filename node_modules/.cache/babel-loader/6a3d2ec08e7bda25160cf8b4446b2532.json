{"ast":null,"code":"var _jsxFileName = \"/Users/hrithiksingh/Desktop/instagram/insta-clone/src/ImageUpload.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { db, storage } from \"./firebase\";\nimport './ImageUpload.css';\nimport firebase from 'firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('firebase/firestore');\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [caption, setCaption] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [progress, setProgress] = useState(0);\n\n  function handleCaptionChange(event) {\n    setCaption(event.target.value);\n  }\n\n  function handleChange(e) {\n    //it is a file input so these function tell upload the first image bcus sometime we click multiple file\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  }\n\n  function handleUpload() {\n    // /these is doing uploading in database\n    const uploadTask = storage.ref(`images/${image.name}`).put(image); //acess to storage firebase get a reference to images (image name is here file name we choose)folder and put that image to storage \n    //these is going to show upload progress line \n\n    uploadTask.on(\"state_changed\", //as state change give me the snaap shot\n    snapshot => {\n      //progress function\n      const progresss = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      setProgress(progresss);\n    }, error => {\n      //error function\n      console.log(error);\n      alert(error.message);\n    }, () => {\n      //complete function /these is here to get uploading image in data\n      storage //go to ref images /go to (image.name child which is file here) /download the url\n      .ref(\"images\").child(image.name).getDownloadURL().then(url => {\n        //post image inside data base and asign value of each\n        db.collection(\"instapost\").add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          //caption from caption state\n          imageUrl: url,\n          //it a download url we hold og in then\n          username: username //it from app.js\n\n        });\n        setProgress(0); //reseting everything\n\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image_upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n      className: \"progress_bar\",\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a captaion....\",\n      value: caption,\n      onChange: handleCaptionChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleUpload,\n      children: \"UPLOAD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"cJgwRAG89mrMYQxLrpicBhZ5yzY=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/Users/hrithiksingh/Desktop/instagram/insta-clone/src/ImageUpload.jsx"],"names":["React","useState","Button","db","storage","firebase","require","ImageUpload","username","caption","setCaption","image","setImage","progress","setProgress","handleCaptionChange","event","target","value","handleChange","e","files","handleUpload","uploadTask","ref","name","put","on","snapshot","progresss","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button } from '@material-ui/core'\nimport { db, storage} from \"./firebase\";\nimport './ImageUpload.css';\nimport firebase from 'firebase'\nrequire('firebase/firestore')\n\nfunction ImageUpload({username}) {\n    const[caption, setCaption] = useState(\"\");\n    const[image, setImage] = useState(null);\n    const[progress, setProgress] = useState(0)\n\n    function handleCaptionChange(event) {\n        setCaption(event.target.value)\n    }\n\n    function handleChange (e){      //it is a file input so these function tell upload the first image bcus sometime we click multiple file\n        if(e.target.files[0]){\n            setImage(e.target.files[0])\n        }\n    }\n\n    function handleUpload(){\n        // /these is doing uploading in database\n        const uploadTask =storage.ref(`images/${image.name}`).put(image)    //acess to storage firebase get a reference to images (image name is here file name we choose)folder and put that image to storage \n        //these is going to show upload progress line \n           uploadTask.on(\n               \"state_changed\",  //as state change give me the snaap shot\n               (snapshot) =>{\n                   //progress function\n                   const progresss =Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100 );\n                   setProgress(progresss);\n               },\n               (error) => {\n                   //error function\n                   console.log(error);\n                   alert(error.message)\n               },\n               () => {\n                   //complete function /these is here to get uploading image in data\n                   storage           //go to ref images /go to (image.name child which is file here) /download the url\n                      .ref(\"images\")\n                      .child(image.name)\n                      .getDownloadURL()\n                      .then(url => {\n                          //post image inside data base and asign value of each\n                          db.collection(\"instapost\").add({\n                              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                              caption: caption,   //caption from caption state\n                              imageUrl: url ,   //it a download url we hold og in then\n                              username: username,  //it from app.js\n                          });\n                          setProgress(0);   //reseting everything\n                          setCaption(\"\");\n                          setImage(null);\n                      })\n               }\n           ) \n    }\n    return (\n        <div className=\"image_upload\">            \n            <progress className=\"progress_bar\" value={progress} max=\"100\" /> \n            <input type=\"text\" placeholder=\"Enter a captaion....\" value={caption} onChange={handleCaptionChange} />                 \n            <input type=\"file\" onChange={handleChange}/>\n            <Button onClick={handleUpload}>UPLOAD</Button>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n"]},"metadata":{},"sourceType":"module"}